name: Java Maven CI Pipeline

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  build:
    name: Build Maven Project
    runs-on: [self-hosted, Linux, X64]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Build with Maven
        run: mvn clean package
        #working-directory: java-hello-world-with-maven

  # static-analysis:
  #   name: SonarQube Scan
  #   runs-on: [self-hosted, Linux, X64]
  #   needs: build

  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v4

  #     - name: SonarQube Scan
  #       env:
  #         SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
  #         SONAR_HOST_URL: http://127.0.0.1:32000 #${{ secrets.SONAR_HOST_URL }}
  #       run: |
  #         export MAVEN_OPTS="-Xmx1G"
  #         mvn --batch-mode clean verify sonar:sonar \
  #           -Dsonar.projectKey=springboot-prometheus-app \
  #           -Dsonar.host.url=${SONAR_HOST_URL} \
  #           -Dsonar.login=${SONAR_TOKEN} \
  #           -Dsonar.ws.timeout=300

  image:
    name: Build & Scan Docker Image
    runs-on: [self-hosted, Linux, X64]
    needs: build

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Build Docker Image with Podman
        run: |
          podman build -t springbootapp:latest .

      - name: Login to Docker Registry
        run: |
          echo "${{ secrets.DOCKER_PASSWORD }}" | podman login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin docker.io

      - name: Push Docker Image
        run: |
          podman tag springbootapp:latest docker.io/${{ secrets.DOCKER_USERNAME }}/springbootapp:latest
          podman push docker.io/${{ secrets.DOCKER_USERNAME }}/springbootapp:latest

  deploy:
    name: Deploy to Kubernetes
    runs-on: [self-hosted, Linux, X64]
    needs: image

    steps:
      - name: Set up and Deploy to Kubernetes
        run: |
          mkdir -p $HOME/.kube
          echo "${{ secrets.KUBECONFIG_DATA }}" | base64 --decode > $HOME/.kube/config
          chmod 600 $HOME/.kube/config
          export KUBECONFIG=$HOME/.kube/config
          kubectl version --client
          kubectl apply -f deployment.yaml
          kubectl apply -f service.yaml
